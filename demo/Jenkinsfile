// Define el pipeline usando sintaxis Declarativa
pipeline {
    // Define dónde se ejecutará este pipeline.
    // 'agent any' significa que Jenkins asignará este pipeline a cualquier agente disponible.
    agent any

    // Declara las herramientas necesarias. Jenkins las instalará o las usará si ya están configuradas.
    // Asegúrate de que estos nombres ('M3', 'JDK-17') coincidan con la configuración de herramientas globales en Jenkins.
    tools {
        maven 'M3'     // Herramienta Maven configurada en Jenkins
        jdk 'JDK-17'   // Herramienta JDK configurada en Jenkins
        // La herramienta Docker usualmente se asume disponible en el agente.
    }

    // Define las etapas del pipeline. Cada etapa es una fase lógica del proceso CI/CD.
    stages {
        // Etapa 1: Checkout - Obtener el código fuente desde el repositorio SCM.
        stage('Checkout') {
            steps {
                echo '>>> Stage: Checkout - Obteniendo el código fuente desde SCM...'
                // Jenkins se encarga de esto automáticamente.
            }
        }

        // Etapa 2: Build - Compilar el código y empaquetar la aplicación con Maven.
        // Esto incluye la ejecución de pruebas unitarias.
        stage('Build') {
            steps {
                echo '>>> Stage: Build - Compilando y empaquetando con Maven...'
                // Ejecuta el comando Maven para limpiar, compilar, ejecutar pruebas y crear el JAR ejecutable.
                sh 'pwd; mvn clean package'
            }
        }

        // Etapa 3: Test Reports - Publicar los resultados de las pruebas unitarias.
        stage('Unit Test Reports') {
            steps {
                echo '>>> Stage: Unit Test Reports - Publicando resultados de pruebas unitarias...'
                // Publica los resultados de las pruebas JUnit generados por Maven.
                junit 'target/surefire-reports/*.xml'
            }
        }

        // Etapa 4: Build Docker Image - Construir la imagen Docker de la aplicación.
        // Utiliza el Dockerfile y el JAR generado en la etapa 'Build'.
        stage('Build Docker Image') {
            steps {
                echo '>>> Stage: Build Docker Image - Construyendo la imagen Docker...'
                // Construye la imagen Docker taggeada como 'microservicio-bienvenida'.
                sh 'docker build -t microservicio-bienvenida .'
            }
        }

        // Etapa 5: Local Deploy - Desplegar el microservicio localmente como un contenedor Docker.
        // Detiene y elimina el contenedor anterior si existe, y luego inicia uno nuevo.
        // AJUSTE DE PUERTOS AQUÍ: Mapear el puerto 9090 del contenedor al 8081 del host.
        stage('Local Deploy') {
            steps {
                echo '>>> Stage: Local Deploy - Desplegando localmente con Docker...'
                // Detiene y elimina el contenedor Docker existente (si lo hay).
                sh 'docker stop microservicio-bienvenida || true'
                sh 'docker rm microservicio-bienvenida || true'

                // Ejecuta un nuevo contenedor Docker.
                // -d: detached mode (segundo plano).
                // -p 8081:9090: Mapea el puerto 9090 INTERNO del contenedor
                //                (donde la app Spring Boot escucha según application.properties)
                //                al puerto 8081 EXTERNO en la máquina host de Jenkins.
                // --name microservicio-bienvenida: Asigna un nombre al contenedor.
                // microservicio-bienvenida: El nombre de la imagen Docker a usar.
                sh 'docker run -d -p 8081:9090 --name microservicio-bienvenida microservicio-bienvenida'
                echo '>>> El microservicio debería estar accesible en http://localhost:8081/api/welcome'
                echo '>>> Verifica los logs del contenedor con: docker logs microservicio-bienvenida'
            }
        }
    }

    // Acciones a realizar después de que todas las etapas se hayan completado.
    post {
        always {
            echo '>>> Pipeline finalizado.'
        }
        success {
            echo '>>> ¡Pipeline ejecutado con éxito! El microservicio está desplegado localmente en el puerto 8081.'
        }
        failure {
            echo '>>> El pipeline falló. Revisa los logs de la consola.'
        }
         unstable {
            echo '>>> El pipeline terminó como inestable (ej: pruebas fallaron).'
        }
    }
}
