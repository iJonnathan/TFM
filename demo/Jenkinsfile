// Define el pipeline usando sintaxis Declarativa
pipeline {
    // Define d√≥nde se ejecutar√° este pipeline.
    // 'agent any' significa que Jenkins asignar√° este pipeline a cualquier agente disponible.
    agent any

    tools {
        maven 'MAVEN'
    }


    environment {
        SCAN_RESULTS_DIR = 'scan-results'
        PROJECT_NAME = 'demo'
        // Definir el directorio de an√°lisis aqu√≠
        JAVA_ANALYSIS_DIR = '../demo/src'  // Cambiar esta ruta seg√∫n necesites
        MAX_FILES_TO_ANALYZE = '10'        // Cambiar este n√∫mero seg√∫n necesites
        AI_MODEL="google/gemini-2.0-flash-exp:free"
    }
    

    // Define las etapas del pipeline. Cada etapa es una fase l√≥gica del proceso CI/CD.
    stages {
        // Etapa 1: Checkout - Obtener el c√≥digo fuente desde el repositorio SCM.
        // Jenkins se encarga de esto autom√°ticamente al inicio del pipeline
        // y el workspace se establece en la ra√≠z del repositorio (TFM/).
        stage('Checkout') {
            steps {
                echo '>>> Stage: Checkout - Obteniendo el c√≥digo fuente desde SCM...'
                // El workspace inicial ya es la ra√≠z del repositorio (TFM/).
                // Puedes verificarlo con sh 'pwd'
            }
        }


        stage('Checkout & Build') {
            steps {
                echo 'Starting AI-powered security and quality analysis pipeline'
                sh "java -version"
                sh "python3 --version"

                // Instalar dependencias Python si no est√°n instaladas
                sh "pip3 install requests pathlib --break-system-packages || pip3 install requests pathlib || echo 'Dependencies already installed'"
                                
                // Crear directorio para resultados
                sh "mkdir -p ${SCAN_RESULTS_DIR}"
                
                
            }
        }        
        
        stage('AI-Powered Analysis') {
            steps {
                script {
                    sh 'pwd'
                    sh 'cp demo/ai_code_analyzer.py scan-results/'

                    // Ahora, entra al directorio de los resultados.
                    dir(env.SCAN_RESULTS_DIR) {
                        // Usar withCredentials para inyectar la API key como variable de entorno
                        withCredentials([string(credentialsId: 'openrouter-api-key', variable: 'OPENROUTER_API_KEY')]) {
                            // Ejecutar el script con par√°metros
                            sh """
                                echo "üöÄ Iniciando an√°lisis con IA..."
                                echo "üìÇ Directorio: \${JAVA_ANALYSIS_DIR}"
                                echo "üìä M√°ximo archivos: \${MAX_FILES_TO_ANALYZE}"
                                echo "ü§ñ Modelo IA: \${AI_MODEL}"
                                
                                python3 ai_code_analyzer.py \\
                                    --directory \${JAVA_ANALYSIS_DIR} \\
                                    --max-files \${MAX_FILES_TO_ANALYZE}
                                    --model \${AI_MODEL}
                            """
                        }
                    }
                }
            }
        }    

    }

    // Acciones a realizar despu√©s de que todas las etapas se hayan completado.
    post {
        always {
            // Publicar resultados de tests
            junit(
                allowEmptyResults: true,
                testResults: 'demo/target/surefire-reports/*.xml'
            )
            
            // Publicar reporte HTML de an√°lisis AI
            publishHTML([
                allowMissing: false,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: env.SCAN_RESULTS_DIR,
                reportFiles: 'ai-analysis-report.html',
                reportName: 'AI Security & Quality Report',
                reportTitles: 'AI-Powered Code Analysis'
            ])

            sh 'echo "Ruta actual artifacts"'
            sh 'pwd'
            sh 'ls -la'
            
            // Archivar resultados JSON
            archiveArtifacts artifacts: "*.json, *.html", 
                            allowEmptyArchive: true,
                            fingerprint: true
        }
        
        success {
            echo 'üéâ Pipeline completed successfully!'
            // Aqu√≠ podr√≠as agregar notificaciones de Slack/Teams
        }
        
        failure {
            echo '‚ùå Pipeline failed!'
            // Notificaciones de fallo
        }
        
        unstable {
            echo '‚ö†Ô∏è Pipeline completed with warnings!'
            // Notificaciones de advertencia
        }
    }
}