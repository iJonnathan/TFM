// Define el pipeline usando sintaxis Declarativa
pipeline {
    // Define d√≥nde se ejecutar√° este pipeline.
    // 'agent any' significa que Jenkins asignar√° este pipeline a cualquier agente disponible.
    agent any


    environment {
        // Configurar la API key de OpenRouter como variable de entorno segura
        OPENROUTER_API_KEY = "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"
        SCAN_RESULTS_DIR = 'scan-results'
        PROJECT_NAME = 'demo'
    }
    

    // Define las etapas del pipeline. Cada etapa es una fase l√≥gica del proceso CI/CD.
    stages {
        // Etapa 1: Checkout - Obtener el c√≥digo fuente desde el repositorio SCM.
        // Jenkins se encarga de esto autom√°ticamente al inicio del pipeline
        // y el workspace se establece en la ra√≠z del repositorio (TFM/).
        stage('Checkout') {
            steps {
                echo '>>> Stage: Checkout - Obteniendo el c√≥digo fuente desde SCM...'
                // El workspace inicial ya es la ra√≠z del repositorio (TFM/).
                // Puedes verificarlo con sh 'pwd'
            }
        }

        // Etapa 2: Build - Compilar el c√≥digo y empaquetar la aplicaci√≥n con Maven.
        stage('Build') {
            steps {
                echo '>>> Stage: Build - Compilando y empaquetando con Maven...'
                // **CAMBIO CR√çTICO:** Usamos 'dir' para movernos al subdirectorio 'demo'
                // donde se encuentra el pom.xml de tu aplicaci√≥n Maven.
                dir('demo') {
                    // Ahora, ejecutamos el comando Maven desde dentro del directorio 'demo/'.
                    // Esto limpia, compila el c√≥digo, ejecuta las pruebas unitarias y crea el JAR
                    // ejecutable en 'demo/target/'.
                    sh 'mvn clean package'
                }
            }
        }

        // Etapa 3: Unit Test Reports - Publicar los resultados de las pruebas unitarias.
        stage('Unit Test Reports') {
            steps {
                echo '>>> Stage: Unit Test Reports - Publicando resultados de pruebas unitarias...'
                // Los reportes de pruebas est√°n en 'demo/target/surefire-reports/'.
                // La ruta es relativa a la ra√≠z del workspace de Jenkins (TFM/).
                junit 'demo/target/surefire-reports/*.xml'
            }
        }


        stage('Checkout & Build') {
            steps {
                echo 'Starting AI-powered security and quality analysis pipeline'
                sh "java -version"
                sh "python3 --version"

                // Instalar dependencias Python si no est√°n instaladas
                sh "pip3 install requests pathlib --break-system-packages || pip3 install requests pathlib || echo 'Dependencies already installed'"
                                
                // Crear directorio para resultados
                sh "mkdir -p ${SCAN_RESULTS_DIR}"
                
                dir('demo') {
                    sh "mvn -Dmaven.test.failure.ignore=true clean package"
                }
            }
        }        
        
        stage('AI-Powered Analysis') {
            steps {
                script {
                    // 1. Copia el script a la ra√≠z del workspace. 
                    //    Aqu√≠, '.' es '/var/lib/jenkins/workspace/ai_analyzer/'.
                    //sh 'cp /opt/jenkins-scripts/ai_code_analyzer.py .'
                    sh 'pwd'
                    sh 'cp demo/ai_code_analyzer.py scan-results/'

                    // 2. Ahora, entra al directorio de los resultados.
                    dir(env.SCAN_RESULTS_DIR) {

                        // 3. Ejecuta el script, que ahora est√° en el directorio padre ('../').
                        sh 'python3 ai_code_analyzer.py'
                    }
                }
            }
        }    

    }

    // Acciones a realizar despu√©s de que todas las etapas se hayan completado.
    post {
        always {
            // Publicar resultados de tests
            junit(
                allowEmptyResults: true,
                testResults: 'demo/target/surefire-reports/*.xml'
            )
            
            // Publicar reporte HTML de an√°lisis AI
            publishHTML([
                allowMissing: false,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: env.SCAN_RESULTS_DIR,
                reportFiles: 'ai-analysis-report.html',
                reportName: 'AI Security & Quality Report',
                reportTitles: 'AI-Powered Code Analysis'
            ])

            sh 'echo "Ruta actual artifacts"'
            sh 'pwd'
            sh 'ls -la'
            
            // Archivar resultados JSON
            archiveArtifacts artifacts: "*.json, *.html", 
                            allowEmptyArchive: true,
                            fingerprint: true
        }
        
        success {
            echo 'üéâ Pipeline completed successfully!'
            // Aqu√≠ podr√≠as agregar notificaciones de Slack/Teams
        }
        
        failure {
            echo '‚ùå Pipeline failed!'
            // Notificaciones de fallo
        }
        
        unstable {
            echo '‚ö†Ô∏è Pipeline completed with warnings!'
            // Notificaciones de advertencia
        }
    }
}